[MAIN]
Version=v0.3 - Templates for SBA Creator
NumItems=4
I0=Header
I1=Library
I2=Concurrent
I3=Sequential

[Header]
Lines=7
L0='-- File Name: '
L1='-- Title: '
L2='-- Version: '
L3='-- Date: '
L4='-- Author: '
L5='-- Description: '
L6='--------------------------------------------------------------------------------'

[Library]
NumItems=2
I0=Common ieee
I1=SBApackage

[Common ieee]
Lines=3
L0='Library ieee;'
L1='use ieee.std_logic_1164.all;'
L2='use ieee.numeric_std.all;'

[sbapackage]
Lines=1
L0='use work.sbapackage.all;'

[Concurrent]
NumItems=4
I0=Entity declaration
I1=Architecture body
I2=Process
I3=Generate statement

[Entity declaration]
Lines=12
L0= 'entity <entity_name> is'
L1= '-- optional generic declaration'
L2= 'generic ('
L3= '  N: integer := 8'
L4= ');'
L5= '--port declaration'
L6= '  port('
L7= '  port1: in std_logic;'
L8= '  port2: out std_logic;'
L9= '  port3: in std_logic_vector(N-1 downto 0)'
L10=');'
L11='end <entity_name>;'

[Architecture body]
Lines=10
L0= 'architecture <architecture_name> of <entity_name> is'
L1= '  -- type definitions'
L2= '  type <type_name> is array(0 to n) of <type>;'
L3= '  -- constant declaration'
L4= '  constant <constant_name>: <type>:= <value>;'
L5= '  -- internal signal declaration'
L6= '  signal <signal_name>: <type>;'
L7= 'begin'
L8= ' '
L9= 'end <architecture_name>;'

[Process]
Lines=11
L0= '  <Label>: process(CLK_I, RST_I)'
L1= '  variable <variable_name>: <type>;'
L2= '  begin'
L3= '    if rising_edge(CLK_I) then'
L4= '      if RST_I='1' then'
L5= '        A <= (others => '0');'
L6= '      else'
L7= '        A <= B;'
L8= '      end if;'
L9= '    end if;'
L10='  end process <label>;'

[Generate statement]
Lines=22
L0= '-- Generate for'
L1= '<generate_label1>:'
L2= '	for <loop_id> in <range> generate'
L3= '		-- Concurrent Statement(s)'
L4= '	end generate;'
L5= ' '
L6= 'U1:'
L7= '	for I in 0 to 3 generate'
L8= '		-- Concurrent Statement(s)'
L9= '	end generate;'
L10=' '
L11=' '
L12=' -- Generate if'
L13='<generate_label2>:' 
L14='	if <condition> generate'
L15='		-- Concurrent Statement(s)'
L16='	end generate;'
L17=' '
L18='U2:' 
L19='	if I=0 generate'
L20='		-- Concurrent Statement(s)'
L21='	end generate;'


[Sequential]
NumItems=4
I0=With
I1=if
I2=case
I3=for-loop

[With]
Lines=6
L0= '   With to_integer(DREG) select DIG <='
L1= '    "1110" When 0,'
L2= '    "1101" When 1,'
L3= '    "1011" When 2,'
L4= '    "0111" When 3,'
L5= '    (DIG'range =>'1') When Others;'

[if] 
Lines=7
L0= '  if <expression1> then'
L1= '  -- Sequential Statement(s)'
L2= '  elsif <expression2> then'
L3= '	-- Sequential Statement(s)'
L4= '  else'
L5= '  -- Sequential Statement(s);'
L6= '  end if;' 

[case] 
Lines=15
L0= '  case <expression> is'
L1= '     when <constant_expression1> =>'
L2= '        -- Sequential Statement(s)'
L3= '     when <constant_expression2> =>'
L4= '        -- Sequential Statement(s)'
L5= '     when <constant_expression3> =>'
L6= '        -- Sequential Statement(s)'
L7= '                                   '
L8= '     -- (More cases)'
L9= '                                   '     
L10='     when <constant_expressionN> =>'
L11='        -- Sequential Statement(s)'      
L12='     when others =>'
L13='        -- Sequential Statement(s)'
L14='  end case;'

[for-loop] 
Lines=7
L0= '<optional_label1>:for <loop_id> in <range> loop'
L1= '        -- Sequential Statement(s)'
L2= 'end loop;'
L3= ' '
L4= '<optional_label2>:for I in <InitValue> to <MaxValue> loop'
L5= '        -- Sequential Statement(s)'
L6= 'end loop;'